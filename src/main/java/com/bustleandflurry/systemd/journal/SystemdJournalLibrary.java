package com.bustleandflurry.systemd.journal;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Pointer;
import org.bridj.SizeT;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>systemd-journal</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("systemd-journal") 
@Runtime(CRuntime.class) 
public class SystemdJournalLibrary {
	static {
		BridJ.register();
	}
	public static final int SD_JOURNAL_LOCAL_ONLY = 1;
	public static final int SD_JOURNAL_RUNTIME_ONLY = 2;
	public static final int SD_JOURNAL_SYSTEM = 4;
	/** deprecated */
	public static final int SD_JOURNAL_SYSTEM_ONLY = (int)(SystemdJournalLibrary.SD_JOURNAL_SYSTEM);
	public static final int SD_JOURNAL_CURRENT_USER = 8;
	public static final int SD_JOURNAL_NOP = 0;
	public static final int SD_JOURNAL_APPEND = 1;
	public static final int SD_JOURNAL_INVALIDATE = 2;
	/** <i>native declaration : /usr/include/systemd/sd-id128.h</i> */
	public static final String SD_ID128_FORMAT_STR = (String)"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x";
	/**
	 * define<br>
	 * Conversion Error : qwords<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/systemd/sd-id128.h</i><br>
	 * qwords = { 0, 0 }
	 */
	/**
	 * Original signature : <code>char* sd_id128_to_string(sd_id128_t, char[33])</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-id128.h:40</i>
	 */
	public static Pointer<Byte > sd_id128_to_string(sd_id128 id, Pointer<Byte > s) {
		return (Pointer)Pointer.pointerToAddress(sd_id128_to_string(id, Pointer.getPeer(s)), Byte.class);
	}
	@Ptr 
	protected native static long sd_id128_to_string(sd_id128 id, @Ptr long s);
	/**
	 * Original signature : <code>int sd_id128_from_string(const char*, sd_id128_t*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-id128.h:42</i>
	 */
	public static int sd_id128_from_string(Pointer<Byte > s, Pointer<sd_id128 > ret) {
		return sd_id128_from_string(Pointer.getPeer(s), Pointer.getPeer(ret));
	}
	protected native static int sd_id128_from_string(@Ptr long s, @Ptr long ret);
	/**
	 * Original signature : <code>int sd_id128_randomize(sd_id128_t*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-id128.h:44</i>
	 */
	public static int sd_id128_randomize(Pointer<sd_id128 > ret) {
		return sd_id128_randomize(Pointer.getPeer(ret));
	}
	protected native static int sd_id128_randomize(@Ptr long ret);
	/**
	 * Original signature : <code>int sd_id128_get_machine(sd_id128_t*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-id128.h:46</i>
	 */
	public static int sd_id128_get_machine(Pointer<sd_id128 > ret) {
		return sd_id128_get_machine(Pointer.getPeer(ret));
	}
	protected native static int sd_id128_get_machine(@Ptr long ret);
	/**
	 * Original signature : <code>int sd_id128_get_boot(sd_id128_t*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-id128.h:48</i>
	 */
	public static int sd_id128_get_boot(Pointer<sd_id128 > ret) {
		return sd_id128_get_boot(Pointer.getPeer(ret));
	}
	protected native static int sd_id128_get_boot(@Ptr long ret);
	/**
	 * Write to daemon<br>
	 * Original signature : <code>int sd_journal_print(int, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:51</i>
	 */
	public static int sd_journal_print(int priority, Pointer<Byte > format, Object... varArgs1) {
		return sd_journal_print(priority, Pointer.getPeer(format), varArgs1);
	}
	protected native static int sd_journal_print(int priority, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>int sd_journal_printv(int, const char*, va_list)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:52</i>
	 */
	public static int sd_journal_printv(int priority, Pointer<Byte > format, Object... ap) {
		return sd_journal_printv(priority, Pointer.getPeer(format), ap);
	}
	protected native static int sd_journal_printv(int priority, @Ptr long format, Object... ap);
	/**
	 * Original signature : <code>int sd_journal_send(const char*, null)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:53</i>
	 */
	public static int sd_journal_send(Pointer<Byte > format, Object... varArgs1) {
		return sd_journal_send(Pointer.getPeer(format), varArgs1);
	}
	protected native static int sd_journal_send(@Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>int sd_journal_sendv(iovec*, int)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:54</i>
	 */
	public static int sd_journal_sendv(Pointer iov, int n) {
		return sd_journal_sendv(Pointer.getPeer(iov), n);
	}
	protected native static int sd_journal_sendv(@Ptr long iov, int n);
	/**
	 * Original signature : <code>int sd_journal_perror(const char*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:55</i>
	 */
	public static int sd_journal_perror(Pointer<Byte > message) {
		return sd_journal_perror(Pointer.getPeer(message));
	}
	protected native static int sd_journal_perror(@Ptr long message);
	/**
	 * Used by the macros below. Don't call this directly.<br>
	 * Original signature : <code>int sd_journal_print_with_location(int, const char*, const char*, const char*, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:58</i>
	 */
	public static int sd_journal_print_with_location(int priority, Pointer<Byte > file, Pointer<Byte > line, Pointer<Byte > func, Pointer<Byte > format, Object... varArgs1) {
		return sd_journal_print_with_location(priority, Pointer.getPeer(file), Pointer.getPeer(line), Pointer.getPeer(func), Pointer.getPeer(format), varArgs1);
	}
	protected native static int sd_journal_print_with_location(int priority, @Ptr long file, @Ptr long line, @Ptr long func, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>int sd_journal_printv_with_location(int, const char*, const char*, const char*, const char*, va_list)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:59</i>
	 */
	public static int sd_journal_printv_with_location(int priority, Pointer<Byte > file, Pointer<Byte > line, Pointer<Byte > func, Pointer<Byte > format, Object... ap) {
		return sd_journal_printv_with_location(priority, Pointer.getPeer(file), Pointer.getPeer(line), Pointer.getPeer(func), Pointer.getPeer(format), ap);
	}
	protected native static int sd_journal_printv_with_location(int priority, @Ptr long file, @Ptr long line, @Ptr long func, @Ptr long format, Object... ap);
	/**
	 * Original signature : <code>int sd_journal_send_with_location(const char*, const char*, const char*, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:60</i>
	 */
	public static int sd_journal_send_with_location(Pointer<Byte > file, Pointer<Byte > line, Pointer<Byte > func, Pointer<Byte > format, Object... varArgs1) {
		return sd_journal_send_with_location(Pointer.getPeer(file), Pointer.getPeer(line), Pointer.getPeer(func), Pointer.getPeer(format), varArgs1);
	}
	protected native static int sd_journal_send_with_location(@Ptr long file, @Ptr long line, @Ptr long func, @Ptr long format, Object... varArgs1);
	/**
	 * Original signature : <code>int sd_journal_sendv_with_location(const char*, const char*, const char*, iovec*, int)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:61</i>
	 */
	public static int sd_journal_sendv_with_location(Pointer<Byte > file, Pointer<Byte > line, Pointer<Byte > func, Pointer iov, int n) {
		return sd_journal_sendv_with_location(Pointer.getPeer(file), Pointer.getPeer(line), Pointer.getPeer(func), Pointer.getPeer(iov), n);
	}
	protected native static int sd_journal_sendv_with_location(@Ptr long file, @Ptr long line, @Ptr long func, @Ptr long iov, int n);
	/**
	 * Original signature : <code>int sd_journal_perror_with_location(const char*, const char*, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:62</i>
	 */
	public static int sd_journal_perror_with_location(Pointer<Byte > file, Pointer<Byte > line, Pointer<Byte > func, Pointer<Byte > message) {
		return sd_journal_perror_with_location(Pointer.getPeer(file), Pointer.getPeer(line), Pointer.getPeer(func), Pointer.getPeer(message));
	}
	protected native static int sd_journal_perror_with_location(@Ptr long file, @Ptr long line, @Ptr long func, @Ptr long message);
	/**
	 * implicitly add code location to messages sent, if this is enabled<br>
	 * Original signature : <code>int sd_journal_stream_fd(const char*, int, int)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:78</i>
	 */
	public static int sd_journal_stream_fd(Pointer<Byte > identifier, int priority, int level_prefix) {
		return sd_journal_stream_fd(Pointer.getPeer(identifier), priority, level_prefix);
	}
	protected native static int sd_journal_stream_fd(@Ptr long identifier, int priority, int level_prefix);
	/**
	 * Original signature : <code>int sd_journal_open(sd_journal**, int)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:100</i>
	 */
	public static int sd_journal_open(Pointer<Pointer<SystemdJournalLibrary.sd_journal > > ret, int flags) {
		return sd_journal_open(Pointer.getPeer(ret), flags);
	}
	protected native static int sd_journal_open(@Ptr long ret, int flags);
	/**
	 * Original signature : <code>int sd_journal_open_directory(sd_journal**, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:101</i>
	 */
	public static int sd_journal_open_directory(Pointer<Pointer<SystemdJournalLibrary.sd_journal > > ret, Pointer<Byte > path, int flags) {
		return sd_journal_open_directory(Pointer.getPeer(ret), Pointer.getPeer(path), flags);
	}
	protected native static int sd_journal_open_directory(@Ptr long ret, @Ptr long path, int flags);
	/**
	 * Original signature : <code>int sd_journal_open_files(sd_journal**, const char**, int)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:102</i>
	 */
	public static int sd_journal_open_files(Pointer<Pointer<SystemdJournalLibrary.sd_journal > > ret, Pointer<Pointer<Byte > > paths, int flags) {
		return sd_journal_open_files(Pointer.getPeer(ret), Pointer.getPeer(paths), flags);
	}
	protected native static int sd_journal_open_files(@Ptr long ret, @Ptr long paths, int flags);
	/**
	 * Original signature : <code>void sd_journal_close(sd_journal*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:103</i>
	 */
	public static void sd_journal_close(Pointer<SystemdJournalLibrary.sd_journal > j) {
		sd_journal_close(Pointer.getPeer(j));
	}
	protected native static void sd_journal_close(@Ptr long j);
	/**
	 * Original signature : <code>int sd_journal_previous(sd_journal*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:105</i>
	 */
	public static int sd_journal_previous(Pointer<SystemdJournalLibrary.sd_journal > j) {
		return sd_journal_previous(Pointer.getPeer(j));
	}
	protected native static int sd_journal_previous(@Ptr long j);
	/**
	 * Original signature : <code>int sd_journal_next(sd_journal*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:106</i>
	 */
	public static int sd_journal_next(Pointer<SystemdJournalLibrary.sd_journal > j) {
		return sd_journal_next(Pointer.getPeer(j));
	}
	protected native static int sd_journal_next(@Ptr long j);
	/**
	 * Original signature : <code>int sd_journal_previous_skip(sd_journal*, uint64_t)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:108</i>
	 */
	public static int sd_journal_previous_skip(Pointer<SystemdJournalLibrary.sd_journal > j, long skip) {
		return sd_journal_previous_skip(Pointer.getPeer(j), skip);
	}
	protected native static int sd_journal_previous_skip(@Ptr long j, long skip);
	/**
	 * Original signature : <code>int sd_journal_next_skip(sd_journal*, uint64_t)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:109</i>
	 */
	public static int sd_journal_next_skip(Pointer<SystemdJournalLibrary.sd_journal > j, long skip) {
		return sd_journal_next_skip(Pointer.getPeer(j), skip);
	}
	protected native static int sd_journal_next_skip(@Ptr long j, long skip);
	/**
	 * Original signature : <code>int sd_journal_get_realtime_usec(sd_journal*, uint64_t*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:111</i>
	 */
	public static int sd_journal_get_realtime_usec(Pointer<SystemdJournalLibrary.sd_journal > j, Pointer<Long > ret) {
		return sd_journal_get_realtime_usec(Pointer.getPeer(j), Pointer.getPeer(ret));
	}
	protected native static int sd_journal_get_realtime_usec(@Ptr long j, @Ptr long ret);
	/**
	 * Original signature : <code>int sd_journal_get_monotonic_usec(sd_journal*, uint64_t*, sd_id128_t*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:112</i>
	 */
	public static int sd_journal_get_monotonic_usec(Pointer<SystemdJournalLibrary.sd_journal > j, Pointer<Long > ret, Pointer<sd_id128 > ret_boot_id) {
		return sd_journal_get_monotonic_usec(Pointer.getPeer(j), Pointer.getPeer(ret), Pointer.getPeer(ret_boot_id));
	}
	protected native static int sd_journal_get_monotonic_usec(@Ptr long j, @Ptr long ret, @Ptr long ret_boot_id);
	/**
	 * Original signature : <code>int sd_journal_set_data_threshold(sd_journal*, size_t)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:114</i>
	 */
	public static int sd_journal_set_data_threshold(Pointer<SystemdJournalLibrary.sd_journal > j, @Ptr long sz) {
		return sd_journal_set_data_threshold(Pointer.getPeer(j), sz);
	}
	protected native static int sd_journal_set_data_threshold(@Ptr long j, @Ptr long sz);
	/**
	 * Original signature : <code>int sd_journal_get_data_threshold(sd_journal*, size_t*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:115</i>
	 */
	public static int sd_journal_get_data_threshold(Pointer<SystemdJournalLibrary.sd_journal > j, Pointer<SizeT > sz) {
		return sd_journal_get_data_threshold(Pointer.getPeer(j), Pointer.getPeer(sz));
	}
	protected native static int sd_journal_get_data_threshold(@Ptr long j, @Ptr long sz);
	/**
	 * Original signature : <code>int sd_journal_get_data(sd_journal*, const char*, const void**, size_t*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:117</i>
	 */
	public static int sd_journal_get_data(Pointer<SystemdJournalLibrary.sd_journal > j, Pointer<Byte > field, Pointer<Pointer<? > > data, Pointer<SizeT > l) {
		return sd_journal_get_data(Pointer.getPeer(j), Pointer.getPeer(field), Pointer.getPeer(data), Pointer.getPeer(l));
	}
	protected native static int sd_journal_get_data(@Ptr long j, @Ptr long field, @Ptr long data, @Ptr long l);
	/**
	 * Original signature : <code>int sd_journal_enumerate_data(sd_journal*, const void**, size_t*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:118</i>
	 */
	public static int sd_journal_enumerate_data(Pointer<SystemdJournalLibrary.sd_journal > j, Pointer<Pointer<? > > data, Pointer<SizeT > l) {
		return sd_journal_enumerate_data(Pointer.getPeer(j), Pointer.getPeer(data), Pointer.getPeer(l));
	}
	protected native static int sd_journal_enumerate_data(@Ptr long j, @Ptr long data, @Ptr long l);
	/**
	 * Original signature : <code>void sd_journal_restart_data(sd_journal*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:119</i>
	 */
	public static void sd_journal_restart_data(Pointer<SystemdJournalLibrary.sd_journal > j) {
		sd_journal_restart_data(Pointer.getPeer(j));
	}
	protected native static void sd_journal_restart_data(@Ptr long j);
	/**
	 * Original signature : <code>int sd_journal_add_match(sd_journal*, const void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:121</i>
	 */
	public static int sd_journal_add_match(Pointer<SystemdJournalLibrary.sd_journal > j, Pointer<? > data, @Ptr long size) {
		return sd_journal_add_match(Pointer.getPeer(j), Pointer.getPeer(data), size);
	}
	protected native static int sd_journal_add_match(@Ptr long j, @Ptr long data, @Ptr long size);
	/**
	 * Original signature : <code>int sd_journal_add_disjunction(sd_journal*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:122</i>
	 */
	public static int sd_journal_add_disjunction(Pointer<SystemdJournalLibrary.sd_journal > j) {
		return sd_journal_add_disjunction(Pointer.getPeer(j));
	}
	protected native static int sd_journal_add_disjunction(@Ptr long j);
	/**
	 * Original signature : <code>int sd_journal_add_conjunction(sd_journal*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:123</i>
	 */
	public static int sd_journal_add_conjunction(Pointer<SystemdJournalLibrary.sd_journal > j) {
		return sd_journal_add_conjunction(Pointer.getPeer(j));
	}
	protected native static int sd_journal_add_conjunction(@Ptr long j);
	/**
	 * Original signature : <code>void sd_journal_flush_matches(sd_journal*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:124</i>
	 */
	public static void sd_journal_flush_matches(Pointer<SystemdJournalLibrary.sd_journal > j) {
		sd_journal_flush_matches(Pointer.getPeer(j));
	}
	protected native static void sd_journal_flush_matches(@Ptr long j);
	/**
	 * Original signature : <code>int sd_journal_seek_head(sd_journal*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:126</i>
	 */
	public static int sd_journal_seek_head(Pointer<SystemdJournalLibrary.sd_journal > j) {
		return sd_journal_seek_head(Pointer.getPeer(j));
	}
	protected native static int sd_journal_seek_head(@Ptr long j);
	/**
	 * Original signature : <code>int sd_journal_seek_tail(sd_journal*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:127</i>
	 */
	public static int sd_journal_seek_tail(Pointer<SystemdJournalLibrary.sd_journal > j) {
		return sd_journal_seek_tail(Pointer.getPeer(j));
	}
	protected native static int sd_journal_seek_tail(@Ptr long j);
	/**
	 * Original signature : <code>int sd_journal_seek_monotonic_usec(sd_journal*, sd_id128_t, uint64_t)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:128</i>
	 */
	public static int sd_journal_seek_monotonic_usec(Pointer<SystemdJournalLibrary.sd_journal > j, sd_id128 boot_id, long usec) {
		return sd_journal_seek_monotonic_usec(Pointer.getPeer(j), boot_id, usec);
	}
	protected native static int sd_journal_seek_monotonic_usec(@Ptr long j, sd_id128 boot_id, long usec);
	/**
	 * Original signature : <code>int sd_journal_seek_realtime_usec(sd_journal*, uint64_t)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:129</i>
	 */
	public static int sd_journal_seek_realtime_usec(Pointer<SystemdJournalLibrary.sd_journal > j, long usec) {
		return sd_journal_seek_realtime_usec(Pointer.getPeer(j), usec);
	}
	protected native static int sd_journal_seek_realtime_usec(@Ptr long j, long usec);
	/**
	 * Original signature : <code>int sd_journal_seek_cursor(sd_journal*, const char*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:130</i>
	 */
	public static int sd_journal_seek_cursor(Pointer<SystemdJournalLibrary.sd_journal > j, Pointer<Byte > cursor) {
		return sd_journal_seek_cursor(Pointer.getPeer(j), Pointer.getPeer(cursor));
	}
	protected native static int sd_journal_seek_cursor(@Ptr long j, @Ptr long cursor);
	/**
	 * Original signature : <code>int sd_journal_get_cursor(sd_journal*, char**)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:132</i>
	 */
	public static int sd_journal_get_cursor(Pointer<SystemdJournalLibrary.sd_journal > j, Pointer<Pointer<Byte > > cursor) {
		return sd_journal_get_cursor(Pointer.getPeer(j), Pointer.getPeer(cursor));
	}
	protected native static int sd_journal_get_cursor(@Ptr long j, @Ptr long cursor);
	/**
	 * Original signature : <code>int sd_journal_test_cursor(sd_journal*, const char*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:133</i>
	 */
	public static int sd_journal_test_cursor(Pointer<SystemdJournalLibrary.sd_journal > j, Pointer<Byte > cursor) {
		return sd_journal_test_cursor(Pointer.getPeer(j), Pointer.getPeer(cursor));
	}
	protected native static int sd_journal_test_cursor(@Ptr long j, @Ptr long cursor);
	/**
	 * Original signature : <code>int sd_journal_get_cutoff_realtime_usec(sd_journal*, uint64_t*, uint64_t*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:135</i>
	 */
	public static int sd_journal_get_cutoff_realtime_usec(Pointer<SystemdJournalLibrary.sd_journal > j, Pointer<Long > from, Pointer<Long > to) {
		return sd_journal_get_cutoff_realtime_usec(Pointer.getPeer(j), Pointer.getPeer(from), Pointer.getPeer(to));
	}
	protected native static int sd_journal_get_cutoff_realtime_usec(@Ptr long j, @Ptr long from, @Ptr long to);
	/**
	 * Original signature : <code>int sd_journal_get_cutoff_monotonic_usec(sd_journal*, const sd_id128_t, uint64_t*, uint64_t*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:136</i>
	 */
	public static int sd_journal_get_cutoff_monotonic_usec(Pointer<SystemdJournalLibrary.sd_journal > j, sd_id128 boot_id, Pointer<Long > from, Pointer<Long > to) {
		return sd_journal_get_cutoff_monotonic_usec(Pointer.getPeer(j), boot_id, Pointer.getPeer(from), Pointer.getPeer(to));
	}
	protected native static int sd_journal_get_cutoff_monotonic_usec(@Ptr long j, sd_id128 boot_id, @Ptr long from, @Ptr long to);
	/**
	 * Original signature : <code>int sd_journal_get_usage(sd_journal*, uint64_t*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:138</i>
	 */
	public static int sd_journal_get_usage(Pointer<SystemdJournalLibrary.sd_journal > j, Pointer<Long > bytes) {
		return sd_journal_get_usage(Pointer.getPeer(j), Pointer.getPeer(bytes));
	}
	protected native static int sd_journal_get_usage(@Ptr long j, @Ptr long bytes);
	/**
	 * Original signature : <code>int sd_journal_query_unique(sd_journal*, const char*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:140</i>
	 */
	public static int sd_journal_query_unique(Pointer<SystemdJournalLibrary.sd_journal > j, Pointer<Byte > field) {
		return sd_journal_query_unique(Pointer.getPeer(j), Pointer.getPeer(field));
	}
	protected native static int sd_journal_query_unique(@Ptr long j, @Ptr long field);
	/**
	 * Original signature : <code>int sd_journal_enumerate_unique(sd_journal*, const void**, size_t*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:141</i>
	 */
	public static int sd_journal_enumerate_unique(Pointer<SystemdJournalLibrary.sd_journal > j, Pointer<Pointer<? > > data, Pointer<SizeT > l) {
		return sd_journal_enumerate_unique(Pointer.getPeer(j), Pointer.getPeer(data), Pointer.getPeer(l));
	}
	protected native static int sd_journal_enumerate_unique(@Ptr long j, @Ptr long data, @Ptr long l);
	/**
	 * Original signature : <code>void sd_journal_restart_unique(sd_journal*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:142</i>
	 */
	public static void sd_journal_restart_unique(Pointer<SystemdJournalLibrary.sd_journal > j) {
		sd_journal_restart_unique(Pointer.getPeer(j));
	}
	protected native static void sd_journal_restart_unique(@Ptr long j);
	/**
	 * Original signature : <code>int sd_journal_get_fd(sd_journal*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:144</i>
	 */
	public static int sd_journal_get_fd(Pointer<SystemdJournalLibrary.sd_journal > j) {
		return sd_journal_get_fd(Pointer.getPeer(j));
	}
	protected native static int sd_journal_get_fd(@Ptr long j);
	/**
	 * Original signature : <code>int sd_journal_get_events(sd_journal*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:145</i>
	 */
	public static int sd_journal_get_events(Pointer<SystemdJournalLibrary.sd_journal > j) {
		return sd_journal_get_events(Pointer.getPeer(j));
	}
	protected native static int sd_journal_get_events(@Ptr long j);
	/**
	 * Original signature : <code>int sd_journal_get_timeout(sd_journal*, uint64_t*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:146</i>
	 */
	public static int sd_journal_get_timeout(Pointer<SystemdJournalLibrary.sd_journal > j, Pointer<Long > timeout_usec) {
		return sd_journal_get_timeout(Pointer.getPeer(j), Pointer.getPeer(timeout_usec));
	}
	protected native static int sd_journal_get_timeout(@Ptr long j, @Ptr long timeout_usec);
	/**
	 * Original signature : <code>int sd_journal_process(sd_journal*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:147</i>
	 */
	public static int sd_journal_process(Pointer<SystemdJournalLibrary.sd_journal > j) {
		return sd_journal_process(Pointer.getPeer(j));
	}
	protected native static int sd_journal_process(@Ptr long j);
	/**
	 * Original signature : <code>int sd_journal_wait(sd_journal*, uint64_t)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:148</i>
	 */
	public static int sd_journal_wait(Pointer<SystemdJournalLibrary.sd_journal > j, long timeout_usec) {
		return sd_journal_wait(Pointer.getPeer(j), timeout_usec);
	}
	protected native static int sd_journal_wait(@Ptr long j, long timeout_usec);
	/**
	 * Original signature : <code>int sd_journal_reliable_fd(sd_journal*)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:149</i>
	 */
	public static int sd_journal_reliable_fd(Pointer<SystemdJournalLibrary.sd_journal > j) {
		return sd_journal_reliable_fd(Pointer.getPeer(j));
	}
	protected native static int sd_journal_reliable_fd(@Ptr long j);
	/**
	 * Original signature : <code>int sd_journal_get_catalog(sd_journal*, char**)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:151</i>
	 */
	public static int sd_journal_get_catalog(Pointer<SystemdJournalLibrary.sd_journal > j, Pointer<Pointer<Byte > > text) {
		return sd_journal_get_catalog(Pointer.getPeer(j), Pointer.getPeer(text));
	}
	protected native static int sd_journal_get_catalog(@Ptr long j, @Ptr long text);
	/**
	 * Original signature : <code>int sd_journal_get_catalog_for_message_id(sd_id128_t, char**)</code><br>
	 * <i>native declaration : /usr/include/systemd/sd-journal.h:152</i>
	 */
	public static int sd_journal_get_catalog_for_message_id(sd_id128 id, Pointer<Pointer<Byte > > ret) {
		return sd_journal_get_catalog_for_message_id(id, Pointer.getPeer(ret));
	}
	protected native static int sd_journal_get_catalog_for_message_id(sd_id128 id, @Ptr long ret);
	/** Undefined type */
	public static interface sd_journal {
		
	};
}
